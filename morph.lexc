! morph.lexc - main morphotactic description
!
!-----------------------------------------------------------------------
! Copyright 2011-2013 Cagri Coltekin <c.coltekin@rug.nl>
!
! This file is part of TRmorph.
!
! TRmorph is free software: you can redistribute it and/or modify
! it under the terms of the GNU Lesser Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! TRmorph is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU Lesser Public License for more details.
!
! You should have received a copy of the GNU Lesser Public License
! along with TRmorph. If not, see <http://www.gnu.org/licenses/>.
!-----------------------------------------------------------------------
!

#include "options.h"
#include "multi-char.lexc"

! LEXICON Root
! Number; ! numbers are special as they are defined through a set of rules.
! Exceptions;
! 
!
! This part is the core lexicon. We do not what to leave any
! of these out. These files do not have lexicon definitions. 
! They only list the lexical items and their class.
!
! #include "lexicon/alpha"
! #include "lexicon/clitics"
! #include "lexicon/punctuation"
! #include "lexicon/qwords"
! #include "lexicon/adjective"
! #include "lexicon/adverb"
! #include "lexicon/conjunction"
! #include "lexicon/determiner"
! #include "lexicon/interjection"
! #include "lexicon/noun"
! #include "lexicon/proper_noun"
! #include "lexicon/onomatopoeia"
! #include "lexicon/postposition"
! #include "lexicon/pronoun"
! #include "lexicon/verb"
! 
! !
! ! These may be "optionalized", or replaced by a more rule-governed
! ! method in the future.
! !
! 
! #include "lexicon/abbreviation"
! #include "lexicon/part_word"
! 
! 
! !
! ! Definitions for numbers, including numeric forms (Arabic and Roman numerals)
! !
! 
! #include "number.lexc"
! #include "exceptions.lexc"


!
! Continuation class for sybols of the alphabet (when they are used
! literally)
!
! when inflected, we require apostrophe after letters (when required
! for porper names), e.g., 'şekil A'da görüldüğü gibi'.
!
LEXICON AlphaCont
%<Alpha%>:@RB   NPApos;
%<Alpha%>:@RB   #;


!
! conjunctions
!

LEXICON CnjCoo
%<Cnj%:coo%>:@RB      #;

LEXICON CnjAdv
%<Cnj%:adv%>:@RB      #;

LEXICON CnjSub
%<Cnj%:sub%>:@RB      #;

!
! The following are for multi-word or discontinous conjunctions.
!
LEXICON CnjCooPart
%<Cnj%:coo%:partial%>:@RB      #;

LEXICON CnjAdvPart
%<Cnj%:adv%:partial%>:@RB      #;

!
! Postpositions
!

!
! non-case-marked complements
!

LEXICON nomPostPadj
%<Postp%:adj%:nomC%>:@RB    AdjCont;
                        nomPostP;

LEXICON nomPostP
%<Postp%:adv%:nomC%>:@RB    AdvCont;

LEXICON nomPostPadjKi
%<Postp%:adj%:nomC%>:@RB    AdjCont;
                        nomPostPKi;

LEXICON nomPostPKi
%<Postp%:adv%:nomC%>:@RB    AdvCont;
%<Postp%:adv%:nomC%>:@RB    Ki;

!
! genitive complements (note: this is different than the nominal
! complement case, where they are fine with genitive pronouns, but no
! other genitive complements)
!

LEXICON genPostP
%<Postp%:adj%:nomC%>:@RB    AdvCont;


!
! accusative complements
!
LEXICON accPostPadj
%<Postp%:adv%:accC%>:@RB    AdjCont;
                            accPostP;

LEXICON accPostP
%<Postp%:adv%:accC%>:@RB    AdvCont;

!
! dative complements
!

LEXICON datPostPadj
%<Postp%:adj%:datC%>:@RB    AdjCont;
                        datPostP;

LEXICON datPostP
%<Postp%:adv%:datC%>:@RB    AdvCont;

LEXICON datPostPadjKi
%<Postp%:adj%:datC%>:@RB    AdjCont;
                        datPostPKi;

LEXICON datPostPKi
%<Postp%:adv%:datC%>:@RB    AdvCont;
%<Postp%:adv%:datC%>:@RB    Ki;

!
! ablative complement
!

LEXICON ablPostPadj
%<Postp%:adj%:ablC%>:@RB    AdjCont;
                        ablPostP;

LEXICON ablPostP
%<Postp%:adv%:ablC%>:@RB    AdvCont;

LEXICON ablPostPadjKi
%<Postp%:adj%:ablC%>:@RB    AdjCont;
                        ablPostPKi;

LEXICON ablPostPKi
%<Postp%:adv%:ablC%>:@RB    AdvCont;
%<Postp%:adv%:ablC%>:@RB    Ki;

!
! instrumetnal/commutative complement
!

LEXICON insPostPadj
%<Postp%:adj%:insC%>:@RB    AdjCont;
                        insPostP;

LEXICON insPostP
%<Postp%:adv%:insC%>:@RB    AdvCont;

LEXICON insPostPadjKi
%<Postp%:adj%:insC%>:@RB    AdjCont;
                        insPostPKi;

LEXICON insPostPKi
%<Postp%:adv%:insC%>:@RB    AdvCont;
%<Postp%:adv%:insC%>:@RB    Ki;

!
! these require a complement with either -lI or -sIz
!

LEXICON liPostPadj
%<Postp%:adj%:liC%>:@RB    AdjCont;
                        liPostP;

LEXICON liPostP
%<Postp%:adv%:liC%>:@RB    AdvCont;

LEXICON liPostPadjKi
%<Postp%:adj%:liC%>:@RB    AdjCont;
                        liPostPKi;

LEXICON liPostPKi
%<Postp%:adv%:liC%>:@RB    AdvCont;
%<Postp%:adv%:liC%>:@RB    Ki;

!
! these requrire a cardinal number as complement
!

LEXICON numPostPadj
%<Postp%:adj%:numC%>:@RB    AdjCont;
                        numPostP;

LEXICON numPostP
%<Postp%:adv%:numC%>:@RB    AdvCont;

LEXICON numPostPadjKi
%<Postp%:adj%:numC%>:@RB    AdjCont;
                        numPostPKi;

LEXICON numPostPKi
%<Postp%:adv%:numC%>:@RB    AdvCont;
%<Postp%:adv%:numC%>:@RB    Ki;

!
! The follwing makes complex postpositons.
!

LEXICON PostPlocation
                PostPloc;
                PostPdat;
                PostPabl;

LEXICON PostPloc
%<N%>%<p1s%>:@RB^(I)m@MB      PostPlocCont;
%<N%>%<p2s%>:@RB^(I)n@MB      PostPlocCont;
%<N%>%<p3s%>:@RB^(s)^I@MB     PostPlocCont;
!%<N%>%<p3p%>:@RB^(s)^I@MB     PostPlocCont;
%<N%>%<p1p%>:@RB^(I)m^Iz@MB   PostPlocCont;
%<N%>%<p2p%>:@RB^(I)n^Iz@MB   PostPlocCont;
%<N%>%<p3p%>:@RBl^Ar^I@MB     PostPlocCont;

LEXICON PostPlocCont
%<loc%>%<Postp%:adv%:nomC%>:^D^A@MB     AdvCont;
%<loc%>%<Postp%:adv%:nomC%>:^D^A@MB     Ki;

LEXICON PostPdat
%<N%>%<p1s%>:@RB^(I)m@MB      PostPdatCont;
%<N%>%<p2s%>:@RB^(I)n@MB      PostPdatCont;
%<N%>%<p3s%>:@RB^(s)^I@MB     PostPdatCont;
!%<N%>%<p3p%>:@RB^(s)^I@MB     PostPdatCont;
%<N%>%<p1p%>:@RB^(I)m^Iz@MB   PostPdatCont;
%<N%>%<p2p%>:@RB^(I)n^Iz@MB   PostPdatCont;
%<N%>%<p3p%>:@RBl^Ar^I@MB     PostPdatCont;

LEXICON PostPdatCont
%<dat%>%<Postp%:adv%:nomC%>:^(y)^A@MB   AdvCont;

LEXICON PostPins
%<N%>%<p1s%>:@RB^(I)m@MB      PostPinsCont;
%<N%>%<p2s%>:@RB^(I)n@MB      PostPinsCont;
%<N%>%<p3s%>:@RB^(s)^I@MB     PostPinsCont;
!%<N%>%<p3p%>:@RB^(s)^I@MB     PostPinsCont;
%<N%>%<p1p%>:@RB^(I)m^Iz@MB   PostPinsCont;
%<N%>%<p2p%>:@RB^(I)n^Iz@MB   PostPinsCont;
%<N%>%<p3p%>:@RBl^Ar^I@MB     PostPinsCont;

LEXICON PostPinsCont
%<ins%>%<Postp%:adv%:nomC%>:^(y)l^A@MB  AdvCont;

LEXICON PostPabl
%<N%>%<p1s%>:@RB^(I)m@MB      PostPablCont;
%<N%>%<p2s%>:@RB^(I)n@MB      PostPablCont;
%<N%>%<p3s%>:@RB^(s)^I@MB     PostPablCont;
!%<N%>%<p3p%>:@RB^(s)^I@MB     PostPablCont;
%<N%>%<p1p%>:@RB^(I)m^Iz@MB   PostPablCont;
%<N%>%<p2p%>:@RB^(I)n^Iz@MB   PostPablCont;
%<N%>%<p3p%>:@RBl^Ar^I@MB     PostPablCont;

LEXICON PostPablCont
%<abl%>%<Postp%:adv%:nomC%>:^D^An@MB    AdvCont;

LEXICON PostPca
%<N%>%<p1s%>:@RB^(I)m@MB      PostPcaCont;
%<N%>%<p2s%>:@RB^(I)n@MB      PostPcaCont;
%<N%>%<p3s%>:@RB^(s)^I@MB     PostPcaCont;
!%<N%>%<p3p%>:@RB^(s)^I@MB     PostPcaCont;
%<N%>%<p1p%>:@RB^(I)m^Iz@MB   PostPcaCont;
%<N%>%<p2p%>:@RB^(I)n^Iz@MB   PostPcaCont;
%<N%>%<p3p%>:@RBl^Ar^I@MB     PostPcaCont;

LEXICON PostPcaCont
%<ca%>%<Postp%:adv%:nomC%>:^C^A@MB       AdvCont;

!
! Possessive suffixes after adjectives and determiners make pronouns.
!
! TODO: The semantic difference between these are generally difficult
!       to get:
!
!       yeni<Adj><p3s><Prn>  `(a) new one'
!       yeni<Adj><0><N><p3s> `his/her new one = the new thing that he/she owns'
!       
!       And becomes more obscure in cases like this:
!
!       mavi<Adj><p2s><Prn>    `the thing that is a blue version of you'
!       mavi<Adj><0><N><p2s>   `the blue thing that you own'
!

LEXICON JP_poss
%<p1s%>%<Prn%>:^(I)m@MB      NposCont;
%<p2s%>%<Prn%>:^(I)n@MB      NposCont;
%<p3s%>%<Prn%>:^(s)^I@MB     NposCont;
%<p3p%>%<Prn%>:^(s)^I@MB     NposCont;
%<p1p%>%<Prn%>:^(I)m^Iz@MB   NposCont;
%<p2p%>%<Prn%>:^(I)n^Iz@MB   NposCont;
%<p3p%>%<Prn%>:l^Ar^I@MB     NposCont;

! besides adjectivals, the adverb `hep' also makes pronominals
! the same way. Instead of <p3s> version `hepi', the correct 
! form is `hepsi'. We allow `hepi', too, as it is used colloquially.
!
! The 1p and 2p singular forms are unusual (likely not possible),
! although we allow them here.
!
LEXICON HepPrn
%<p3s%>%<Prn%>:s^I@MB     NposCont;
%<p3p%>%<Prn%>:s^I@MB     NposCont;
%<p1s%>%<Prn%>:^(I)m@MB      NposCont;
%<p2s%>%<Prn%>:^(I)n@MB      NposCont;
%<p3s%>%<Prn%>:^(s)^I@MB     NposCont;
%<p1p%>%<Prn%>:^(I)m^Iz@MB   NposCont;
%<p2p%>%<Prn%>:^(I)n^Iz@MB   NposCont;

!
! onomatopoeic words
!
LEXICON Onom
%<Onom%>:@RB        OnomCont;

LEXICON  OnomCont
                    #;
                    Oderiv; ! TODO: this may be overgenerating

!
! interjections
!
! these do not have to be separate lexicons, but it makes things
! easier with old lexicon conversion.

LEXICON Interjection
%<Ij%>:@RB      InterjectionCont;

LEXICON InterjectionCont
                  #;
                  D_lA;

! LEXICON QIntj   ! this used to be `hani'.
! %<Ij%:qst%>:@RB      #;



!
! Rules governing nouns, including proper names and compounding
!

LEXICON NPcomp  ! this is only for lexicalized forms with compounding
@NCOMP%<N%:prop%>:^(s)^I@NCOMP@RB NPcont;

LEXICON NP
%<N%:prop%>:@RB   NPcont;

LEXICON NP_typo
%<N%:prop%:typo%>:@RB   NPcont;

LEXICON NP_abbr
%<N%:prop%:abbr%>:@ABBR@RB   NPAbbrCont;

LEXICON NPAbbrCont
                #;
                NPApos;
#if (APOSTROPHE_OPTIONAL_ABBR == 1)
                NPAposCont;
#endif

LEXICON NPcont
                #;
                NPApos;
#if (APOSTROPHE_OPTIONAL_PN == 1) 
                NPAposCont;
#endif


LEXICON NPApos  
0:@APOS@MB     NPAposCont;

LEXICON   NPAposCont  
                Nderiv;
                Ninfl;

LEXICON NPnation
%<N%:prop%>:@RB   NPnationCont;

LEXICON NPnationCont
                NPcont;
                ND_CAlanguage;

LEXICON NPperson
%<N%:prop%>:@RB   NPpersonCont;

LEXICON NPpersonCont
                NPcont;
0:@APOS@MB      D_gil;
#if (APOSTROPHE_OPTIONAL_PN == 1) 
                D_gil;
#endif



LEXICON Ncomp ! this is only for lexicalized forms with compounding
@NCOMP%<N%>:^(s)^I@NCOMP@RB NcompCont;

LEXICON NcompInfl  ! this is for regular nouns
%<ncomp%>:^(s)^I@NCOMP@MB    NcompCont;


LEXICON NcompCont
#if (NOUN_APOSTROPHE == 1)
0:@APOS@MB  NcompAposCont;
#endif
            #;
            NcompAposCont;

LEXICON NcompAposCont
                Nderiv;
                Ninfl;

LEXICON Ninfl
                Nplu;
                Npos;
                Ncase;
                NomPredicate;

!
! Nouns representing family members can get plural after p1s/p2s
!
! teyze-m-ler, dayın-n-lar ..
! -lAr here works like a derivational morpheme that derives another
! (plural) noun. However, it is at best odd to have another possessive
! suffix, so, we do not allow another possessive suffix afater -lAr.
!

LEXICON Nfamily
%<N%>:@RB   Ncont;
%<N%>:@RB   NfamCont;

LEXICON NfamCont
%<p1s%>:^(I)m@MB      NfamPosCont;
%<p2s%>:^(I)n@MB      NfamPosCont;

LEXICON NfamPosCont
%<pl%>:l^Ar@MB NposCont;
! %<pl%>:l^Ar@MB NpluCont; ! use this instead  of the above line
                           ! to accept forms like dayı-n-lar-ım

!
! Noun abbreviations
!

LEXICON N_unit  ! we may treat these differntly later
%<N%:abbr%>:@ABBR@RB       NAbbrCont;

LEXICON N_abbr  
%<N%:abbr%>:@ABBR@RB       NAbbrCont;

LEXICON NAbbrCont
                        #;
0:@APOS@MB              Ncont;
#if (APOSTROPHE_OPTIONAL_ABBR == 1) 
                        Ncont;
#endif

!
! End of family nouns + possessive-plural 
!

LEXICON N
%<N%>:@RB   Ncont;

LEXICON N_typo
#if (MARK_TYPOS == 1) 
%<N%:typo%>:@RB     Ncont;
#else
                    N;
#endif

LEXICON NPart
%<N%:partial%>:@RB   #;

LEXICON NPartLast
%<N%%:partial%>:@RB   Ncont;

LEXICON Ncont
    Nderiv;
    NcompCont; ! includes final
#if (MARK_NCOMP == 1) 
    NcompInfl;
#endif

LEXICON Ntime
%<N%>:@RB    NtimeCont;

LEXICON NtimeCont
                    Ki;
                    D_dir;
                    Ncont;

LEXICON Nplu
%<pl%>:l^Ar@MB NpluCont;

LEXICON NpluCont
   #;
   Npos;
   Ncase;
   NomPredicatePLU;
   ND_CA;
   D_arasi;

LEXICON Npos
%<p1s%>:^(I)m@MB      NposCont;
%<p2s%>:^(I)n@MB      NposCont;
%<p3s%>:^(s)^I@MB     Npos3sCont;
%<p3p%>:^(s)^I@MB     NposCont; ! burasi Ali'lerin ev-i
%<p1p%>:^(I)m^Iz@MB   NposCont;
%<p2p%>:^(I)n^Iz@MB   NposCont;
%<p3p%>:l^Ar^I@MB     NposCont;

LEXICON Npos3sCont
        NposCont;
#if (MARK_NCOMP == 0 && NOUN_APOSTROPHE == 1) 
0:@APOS@MB  NposCont;
#endif


LEXICON  NposCont
    #;
    Ncase;
    NomPredicate;
    D_gil; ! TODO: this should be restricted
    ND_CA;

LEXICON  NCaseNoGen
! %<nom%>:^(y)^I@MB   NomCaseCont; ! we do not (yet) mark for nominative
%<acc%>:^(y)^I@MB   AccCaseCont;
%<dat%>:^(y)^A@MB   Case1Cont;
%<abl%>:^D^An@MB    Case1Cont;
%<ins%>:^(y)l^A@MB  Case1Cont;
%<loc%>:^D^A@MB     LocCaseCont;

LEXICON  Ncase
                    D_sIz; ! sIz can combine after most of the inflectional suffixes
                    NCaseNoGen;                    
%<gen%>:^(n)^In@MB  GenCaseCont;

LEXICON Case1Cont
            #;
            NomPredicate;

!
! Normally, predicative use after accusative is almost an
! impossibility, but some forms exist: `renginiyse Ali seçmiş', 
!
LEXICON AccCaseCont
             Case1Cont;
!            #;

LEXICON LocCaseCont
            #;
            Ki;
            NomPredicate;

LEXICON GenCaseCont
            #;
            Ki;
            NomPredicate;

LEXICON Ki
%<ki%>:ki@MB DerivJCont;

!
! This part deals with person agreement
!

LEXICON NomPredicatePLU
%<%0%>%<V%>:@MB                 NomPredPagr;
%<%0%>%<V%>:@MB                 NomPredPagr3s;
%<%0%>%<V%>:@MB                 NomPredDir;
%<%0%>%<V%>:@MB                 CplAll;
                                NomPredQ;

LEXICON NomPredicate
%<%0%>%<V%>:@MB                       NomPredPagr3p;
                                      NomPredicatePLU;

LEXICON NomPredicateMAK
%<%0%>%<V%>:@MB                        NomPredPagr3s;
%<%0%>%<V%>:@MB                        NomPredPagr3p;
%<%0%>%<V%>:@MB                        NomPredDir;
%<%0%>%<V%>:@MB                        CplAll;
                                       NomPredQ;

LEXICON NomPredQ
%<%0%>%<V%>:@MB                         NomPredQCont;

LEXICON NomPredQCont
#if (PREDICATE_WITHOUT_PAGR == 1)
                                          #;
#endif
%<q%>:@miSPCm^I@MB                        NomPredPagr;
%<q%>:@miSPCm^I@MB                        NomPredDir;
%<q%>:@miSPCm^I@MB                        CplAll;

LEXICON NomPredPagr
%<cpl%:pres%>%<1s%>:^(y)^Im@MB       NomPredPagrCont;
%<cpl%:pres%>%<2s%>:s^In@MB          NomPredPagrCont;
%<cpl%:pres%>%<3s%>:0@MB             NomPredPagrCont;
%<cpl%:pres%>%<3p%>:0@MB             NomPredPagrCont;
%<cpl%:pres%>%<1p%>:^(y)^Iz@MB       NomPredPagrCont;
%<cpl%:pres%>%<2p%>:s^In^Iz@MB       NomPredPagrCont;

LEXICON NomPredPagr3s
%<cpl%:pres%>%<3s%>:0@MB             NomPredPagrCont;
%<cpl%:pres%>%<3p%>:0@MB             NomPredPagrCont;

LEXICON NomPredPagrCont
                    #;
                    DIrEnd;


LEXICON  NomPredPagr3p
%<cpl%:pres%>%<3p%>:l^Ar@MB         NomPredPagr3pCont;
%<3p%>:l^Ar@MB                      PAgrCplAll;

LEXICON NomPredPagr3pCont
                        NomPredPagrCont;        ! includes end state
%<q%>:@miSPCm^I@MB      NomPred3pQCont;

LEXICON  NomPred3pQCont
                        NomPredPagrCont;        ! includes end state
                        PAgrCplAll;

LEXICON NomPredDir
%<dir%>:^D^Ir@MB  NomPredDirCont;

LEXICON NomPredDirCont
%<3p%>:l^Ar@MB    #;

LEXICON DIrEnd
%<dir%>:^D^Ir@MB  #;

!
! Rules governing adjectives and adverbs
!
!
! TODO: proper handling of derivations
!           . adj -> adv zero derivation
!           . -ca -casi etc.

LEXICON Adj
%<Adj%>:@RB        AdjCont;

LEXICON Adj_typo
#if (MARK_TYPOS == 1) 
%<Adj%:typo%>:@RB     AdjCont;
#else
                    Adj;
#endif

LEXICON AdjPartLast
%<Adj%:partial%>:@RB        AdjCont;

LEXICON AdjPart
%<Adj%:partial%>:@RB        #;

LEXICON AdjNcomp
@NCOMP%<Adj%>:^(s)^I@NCOMP@RB AdjCont;

LEXICON  AdjCont
                    #;
                    NomPredicate;
                    Jderiv;

LEXICON AdvHep
%<Adv%>:@RB         HepPrn;
                    Adv;

LEXICON Adv
%<Adv%>:@RB         AdvCont;


LEXICON Adv_typo
#if (MARK_TYPOS == 1) 
%<Adv%:typo%>:@RB     AdjCont;
#else
                    Adv;
#endif

LEXICON AdvPartLast
%<Adv%:partial%>:@RB        AdvCont;

LEXICON AdvPart
%<Adv%:partial%>:@RB        #;
                  
LEXICON QAdv
%<Adv%:qst%>:@RB  AdvCont;

LEXICON QAdj
%<Adj%:qst%>:@RB  AdjCont;

LEXICON AdvTime
%<Adv%>:@RB         AdvTimeCont;

LEXICON QAdvTime
%<Adv%:qst%>:@RB    AdvTimeCont;

LEXICON AdvTimeCont
                    Ki;
                    AdvCont;

LEXICON AdvCont
                #;
                Aderiv;


!
! Rules governing pronouns
!
! TODO: -(y)ken added to som bare pronouns

LEXICON Prn
%<Prn%>:@RB PrnCont;

LEXICON PrnCont  ! this is all, except compounding
    #;
    Pderiv;
    NcompCont;

LEXICON PersPrn1s
%<Prn%:pers%:1s%>:@PRN@RB PersPrnCont;
LEXICON PersPrn2s
%<Prn%:pers%:2s%>:@PRN@RB PersPrnCont;
LEXICON PersPrn3s
%<Prn%:pers%:3s%>:@RB PersPrnCont;

LEXICON PersPrn1p
%<Prn%:pers%:1p%>:@PRN@RB PersPrnContPL;
LEXICON PersPrn2p
%<Prn%:pers%:2p%>:@RB PersPrnContPL;
LEXICON PersPrn3p
%<Prn%:pers%:3p%>:@RB PersPrnContPL;

LEXICON PersPrnRfl1s
%<Prn%:refl%:1s%>:@RB PersPrnCont;
LEXICON PersPrnRfl2s
%<Prn%:refl%:2s%>:@RB PersPrnCont;
LEXICON PersPrnRfl3s
%<Prn%:refl%:3s%>:@RB PersPrnCont;

LEXICON PersPrnRfl1p
%<Prn%:refl%:1p%>:@RB PersPrnContPL;
LEXICON PersPrnRfl2p
%<Prn%:refl%:2p%>:@RB PersPrnContPL;
LEXICON PersPrnRfl3p
%<Prn%:refl%:3p%>:@RB PersPrnContPL;

LEXICON PersPrnCont
                    #;
                    Ncase;
                    ND_CA;
                    D_lI;
                    NomPredicate;

! TODO: replication ...
LEXICON PersPrnContPL
                    #;
                    Ncase;
                    ND_CA;
                    D_lI;
                    NomPredicatePLU;

LEXICON PersPrn
%<Prn%:pers%>:@RB PrnCont;

LEXICON PPrnBirBir
%<Prn%>:@RB PrnContNoPlu;

LEXICON PrnContNoPlu
        Npos;
        Ncase;

LEXICON DemPrn
%<Prn%:dem%>:@RB PrnCont;

LEXICON QPrn
%<Prn%:qst%>:@RB PrnCont;

LEXICON QPrnLoc
%<Prn%:qst%:locp%>:@RB PrnCont;

LEXICON QPrnPers
%<Prn%:qst%:pers%>:@RB PrnCont;

LEXICON LocPrn  ! TODO: these do not inflect except only in some fixed expressions
%<Prn%:locp%>:@RB PrnCont;

!
! Determiners
!

LEXICON  DetDef
%<Det%:def%>:@RB DetCont;
LEXICON  DetIndef
%<Det%:indef%>:@RB DetCont;
LEXICON  DetDefQ
%<Det%:def%:qst%>:@RB DetCont;
LEXICON  DetIndefQ
%<Det%:indef%:qst%>:@RB DetCont;

LEXICON DetCont
                    #;
                    JP_poss;    ! TODO: not all determiners do this.


! Number inflections and derivations

LEXICON NumStem
%<Num%>:@RB  NumCont;

LEXICON QNum
%<Num%:qst%>:@RB  NumCont;

LEXICON  NumHalf
buçu^k  NumStem;

LEXICON NumCont
                #;
                NumDeriv;
                JP_poss;    ! ikimiz, yedisi, yüzünüz

LEXICON NumericStem
%<Num%:ara%>:@RB             NumericCont;    
!%<Num%>%<dig%>:@RB     NumericCont;    

LEXICON RomanStem
%<Num%:rom%>:@RomNum@RB      NumericCont;
!%<Num%>%<rom%>:@RB     NumericCont;    

LEXICON NumericCont
                #;
                NumericApos;
                NumericDotOrd;

LEXICON NumericApos
0:%@APOS@MB      NumDeriv;
0:%@APOS@MB      JP_poss;
#if (APOSTROPHE_OPTIONAL_NUM == 1) 
                 NumDeriv;
                 JP_poss;
#endif

LEXICON NumericDotOrd
%<ord%>:%.@MB      NumericDotOrdCont;

LEXICON   NumericDotOrdCont
                 #;
0:%@APOS@MB      AdjCont;
#if (APOSTROPHE_OPTIONAL_NUM == 1) 
                 AdjCont;
#endif

LEXICON NumDeriv
                        NumOrd; 
                        NumDist; 
                        Num_PluCA; 
                        Mderiv;

! this takes care of words like 'on-lar-ca'
! TODO: restrict this. There is no 'onbir-ler-ce'
LEXICON Num_PluCA 
%<pl%>:l^Ar@MB      MD_CA;

LEXICON NumOrd
%<ord%>:^(I)nc^I@MB    NumOrdCont;

LEXICON NumOrdCont
            #;
            AdjCont;

LEXICON NumDist
%<dist%>:^(ş)^Ar@MB       NumDistCont;

LEXICON NumDistCont
            #;



!
! Verbal morphology starts here
!


! this is for regular verbs: 
!  - aorist form is -(I)r
!  - causative is predictable from the final phoneme
!  - no reflexive or reciprocal is allowed

LEXICON V
%<V%>:@RB   VCont;

LEXICON VPartLast
%<V%:partial%>:@RB   VCont;

LEXICON VPart
%<V%:partial%>:@RB   #;

LEXICON   VCont
                Vderiv;
                Vinfl;

LEXICON   Vinfl
                    VCausRegular;
                    VCausRegularCont;

LEXICON VNoCausCont
                    Vderiv;
                    VPassive;
                    VPassiveCont;
        
LEXICON VNoAorCont
                    VCausRegular;
                    VNoCausNoAorCont;

LEXICON VNoCausNoAorCont
                    Vderiv;
                    VPassive;
                    VCabilNeg;
                    VNegative;
                    VComp;
                    NonFiniteVerbNoAor;

LEXICON V_Rcp
%<V%>:@RB   VRcpCont;

LEXICON   VRcpCont
                    VCont;
                    VRcp;

LEXICON VRcp
%<rcp%>%<V%>:^(I)ş@MB     VCont;


LEXICON V_Rfl
%<V%>:@RB   VRflCont;

LEXICON   VRflCont
                    VCont;
                    VRfl;
LEXICON   VRfl
%<rfl%>%<V%>:^(I)n@MB       VCont;

LEXICON  V_Rfl_Rcp
%<V%>:@RB   VRflRcpCont;
%<V%>:@RB   VRflRcpCont;

LEXICON  VRflRcpCont
                    VCont;
                    VRcp;
                    VRfl;

LEXICON V_CausDir
%<V%>:@RB           VCausDirCont;

LEXICON VCausDirCont
                    VCausDir;
                    VNoCausCont;

LEXICON VCausDir
%<caus%>%<V%>:^D^Ir@MB      VCont;

!
LEXICON V_CausIr
%<V%>:@RB           VCausIrCont;

LEXICON VCausIrCont
                    VCausIr;
                    VNoCausCont;

LEXICON VCausIr
%<caus%>%<V%>:^Ir@MB        VCont;

!
LEXICON V_CausIt
%<V%>:@RB           VCausItCont;

LEXICON VCausItCont
                    VCausIt;
                    VNoCausCont;

LEXICON VCausIt
%<caus%>%<V%>:^It@MB        VCont;

!
LEXICON V_Rcp_CausDir
%<V%>:@RB           VRcpCausDirCont;

LEXICON VRcpCausDirCont
                    VRcp;
                    VCausDir;
                    VNoCausCont;

!LEXICON V_Rfl_CausDir
!%<V%>:@RB           VRflCausDirCont;

!LEXICON           VRflCausDirCont
!                    VRfl;
!                    VCausDir;
!                    VNoCausCont;

!LEXICON V_Rfl_Rcp_CausDir
!                    VRcp;
!                    VRfl;
!                    VCausDir;
!                    VNoCausCont;

LEXICON V_CausIrreg
%<V%>:@RB           VCausIrregCont;

LEXICON VCausIrregCont
                  VNoCausCont;

! LEXICON V_Rcp_CausIrreg
!                 VNoCausCont;
!                 VRcpCont;

! LEXICON V_Rfl_CausIrreg
!                 VNoCausCont;
!                 VRflCont;

LEXICON V_Rfl_Rcp_CausIrreg
%<V%>:@RB           VRflRcpCausIrregCont;

LEXICON VRflRcpCausIrregCont
                 VRfl;
                 VRcp;
                 VNoCausCont;

LEXICON V_AorAr
%<V%>:@RB           VAorArCont;

LEXICON VAorArCont
            VAorAr;
            VNoAorCont;

LEXICON  VAorAr
%<aor%>:^(A)r@MB   AorArCont;

LEXICON   AorArCont
                    TAMg1Cont;
                    CVcesinePagr;
                    VerbalAdj;

LEXICON V_Rcp_AorAr
%<V%>:@RB           VRcpAorArCont;

LEXICON  VRcpAorArCont
            VAorAr;
            VRcp;
            VNoAorCont;

LEXICON V_Rfl_AorAr
%<V%>:@RB           VRflAorArCont;


LEXICON  VRflAorArCont
            VAorAr;
            VRfl;
            VNoAorCont;

LEXICON  V_Rfl_Rcp_AorAr
%<V%>:@RB           VRflRcpAorArCont;

LEXICON  VRflRcpAorArCont
            VAorAr;
            VRfl;
            VRcp;
            VNoAorCont;

LEXICON V_CausDir_AorAr
%<V%>:@RB           VCausDirAorArCont;

LEXICON VCausDirAorArCont
                        VAorAr;
                        VCausDir;
                        VNoCausNoAorCont;

LEXICON V_CausIr_AorAr
%<V%>:@RB           VCausIrAorArCont;

LEXICON VCausIrAorArCont
                        VAorAr;
                        VCausIr;
                        VNoCausNoAorCont;

LEXICON V_CausAt_AorAr
%<V%>:@RB           VCausAtAorArCont;

LEXICON VCausAtAorArCont
                        VAorAr;
                        VCausAt;
                        VNoCausNoAorCont;

LEXICON VCausAt
%<caus%>%<V%>:^At@MB        VCont;

!
LEXICON V_CausAr_AorAr
%<V%>:@RB           VCausArAorArCont;

LEXICON VCausArAorArCont
                        VAorAr;
                        VCausAr;
                        VNoCausNoAorCont;

LEXICON VCausAr
%<caus%>%<V%>:^Ar@MB        VCont;

!
LEXICON V_CausArt_AorAr
%<V%>:@RB           VCausArtAorArCont;

LEXICON VCausArtAorArCont
                        VAorAr;
                        VCausArt;
                        VNoCausNoAorCont;

LEXICON VCausArt
%<caus%>%<V%>:^Art@MB        VCont;

!
LEXICON V_CausIt_AorAr
%<V%>:@RB           VCausItAorArCont;

LEXICON VCausItAorArCont
                        VAorAr;
                        VCausIt;
                        VNoCausNoAorCont;

!
LEXICON V_Rcp_CausDir_AorAr
%<V%>:@RB           VRcpCausDirAorArCont;

LEXICON VRcpCausDirAorArCont
                        VAorAr;
                        VCausDir;
                        VRcp;
                        VNoCausNoAorCont;

LEXICON V_Rfl_CausDir_AorAr
%<V%>:@RB           VRflCausDirAorArCont;

LEXICON VRflCausDirAorArCont
                        VAorAr;
                        VCausDir;
                        VRfl;
                        VNoCausNoAorCont;

LEXICON V_Rfl_Rcp_CausDir_AorAr
%<V%>:@RB           VRflRcpCausDirAorArCont;


LEXICON VRflRcpCausDirAorArCont
                        VAorAr;
                        VCausDir;
                        VRcp;
                        VRfl;
                        VNoCausNoAorCont;

LEXICON V_CausIrreg_AorAr
%<V%>:@RB           VCausIrregAorArCont;

LEXICON VCausIrregAorArCont
                        VAorAr;
                        VNoCausNoAorCont;

LEXICON V_Rcp_CausIrreg_AorAr
%<V%>:@RB           VRcpCausIrregAorArCont;

LEXICON V_Rfl_CausIrreg_AorAr
%<V%>:@RB           VRflCausIrregAorArCont;

LEXICON VRflCausIrregAorArCont
                        VRfl;
                        VAorAr;
                        VNoCausNoAorCont;

LEXICON VRcpCausIrregAorArCont
                        VRcp;
                        VAorAr;
                        VNoCausNoAorCont;

! LEXICON V_Rfl_Rcp_CausIrreg_AorAr

!
! Here more regular stuff after stem irregularities
!

LEXICON VCausRegular
%<caus%>%<V%>:@CAUS@MB      VCausLoop;

LEXICON VCausLoop
            VCausRegular;
            VCausRegularCont;

LEXICON VCausRegularCont
            VPassive;
            VPassiveCont;
            VNegative;
            Vderiv;

LEXICON VPassive
%<pass%>%<V%>:^(I)@LN@MB       VPassiveCont;

LEXICON  VPassiveCont
                          VCabilNeg;
                          VNegative;
                          VNegativeCont;
                          D_yAsI;
!

LEXICON VCabilNeg
%<abil%>%<V%>:^(y)^A@MB     VNegative;

!

LEXICON VNegative
%<neg%>:m^A@MB      VNegativeCont;
%<neg%>:m^A@MB      CVNeg;

LEXICON VNegativeCont
                    VComp;
                    NonFiniteVerb;

!


LEXICON VComp
%<abil%>%<V%>:^(y)^Abil@MB VCompCont;
%<iver%>%<V%>:^(y)^Iver@MB VCompCont;
%<adur%>%<V%>:^(y)^Adur@MB VCompCont;
%<agel%>%<V%>:^(y)^Agel@MB VCompCont;
%<agor%>%<V%>:^(y)^Agör@MB VCompCont;
%<akal%>%<V%>:^(y)^Akal@MB VCompCont;
%<ayaz%>%<V%>:^(y)^Ayaz@MB VCompCont;
! %<akoy%>%<V%>:^(y)^Akoy@MB VCompCont;

LEXICON VCompCont
                    VCausRegular;
                    VCausRegularCont;
                    NonFiniteVerb;

LEXICON     NonFiniteVerb
                    NonFiniteVerbNoAor;
                    TAMAor;

LEXICON     NonFiniteVerbNoAor
                    VTAM;
                    SubSuffixes;

! Tense / aspec / modality markers

LEXICON VTAM
%<evid%>:m^Iş@MB          TAMNarrCont;
%<fut%>:^(y)^Ac^A^k@MB    TAMFutCont;
%<obl%>:m^Al^I@MB         TAMOblCont;
%<impf%>:m^Akt^A@MB       TAMMaktaCont; ! TODO: -maktayızdır ??
%<cont%>:^(I)yor@MB       TAMContCont;
%<past%>:^D^I@MB          TAMDICont;
%<cond%>:s^A@MB           TAMCondCont;
%<cond%>:^(y)^A@MB        TAMCondYACont; ! this is informal use
%<opt%>:^(y)^A@MB         TAMOptCont;
%<imp%>:0@MB              TAMImpCont;

LEXICON TAMAor      ! this is the regular one
%<aor%>:^(I)r@MB          AorCont;

LEXICON TAMNarrCont
            TAMg1Cont;
            CVcesinePagr;
            VerbalAdj;

LEXICON AorCont
            TAMg1Cont;  ! TODO/CHECK: not allow -DIr: okurdur ??
            CVcesinePagr;
            VerbalAdj;

LEXICON TAMFutCont
            TAMg1Cont;
            VerbalAdj;

LEXICON TAMOblCont
            TAMg1Cont;

LEXICON TAMMaktaCont
            TAMg1Cont;
!            VerbalAdj;

LEXICON TAMContCont
            TAMg1Cont;
!            VerbalAdj;

LEXICON TAMg1Cont
                        PAgrG1;
                        PAgrG1p3;
                        TAMg1DIr;
                        CplAll;
%<q%>:@miSPCm^I@MB      TAMG1QCont;
#if (PREDICATE_WITHOUT_PAGR == 1)
                        #;
#endif

! This is for cases like: 'birleşmiş milletler', 
! 'okumakta olan oğrenci', 'basılıyor olan dergiler'
! 'adam olacak çocuk', 'ele gelir sonuç' etd.
! some of these (-makta -yor) are restricted to be used 
! before an auxiliary verb (ol, bul) but some can stand alone.
! These are, after all, some sort of subordination. The result 
! is something that complements a noun, so we mark it as 
! an adjective. Especially -acak is confusing as we also have 
! an explicit subordinating suffix.
!
! We assume that these forms behave just like any other adjective, 
! although they may be more conservative about combining with all
! suffixes that attach to adjectives (particularly, see the note 
! above on -makta -yor).
!
LEXICON VerbalAdj
%<Adj%>:@MB       AdjCont;


LEXICON TAMG1QCont
                PAgrG1;
                CplEvid;
                CplPast;
                TAMG1QDIr;

LEXICON TAMG1QDIr
%<dir%>:^D^Ir@MB            TAMG1QDIrCont;

LEXICON TAMG1QDIrCont
%<3p%>:l^Ar@MB              #;



LEXICON PAgrG1     ! <3p>:lAr is treated separately
%<1s%>:^(y)^Im@MB       PAgrG1Cont;
%<2s%>:s^In@MB          PAgrG1Cont;
%<3s%>:0@MB             PAgrG1Cont;
%<3p%>:0@MB             PAgrG1Cont;
%<1p%>:^(y)^Iz@MB       PAgrG1Cont;
%<2p%>:s^In^Iz@MB       PAgrG1Cont;


LEXICON PAgrG1Cont
                    #;
%<dir%>:^D^Ir@MB    #;


LEXICON  PAgrG1p3
%<3p%>:l^Ar@MB   PAgrG1p3Cont;

LEXICON PAgrG1p3Cont
                        PAgrG1Cont;        ! includes end state
                        PAgrCplAll;
%<q%>:@miSPCm^I@MB      PAgrG1p3QCont;

LEXICON PAgrG1p3QCont
                            #;
                            DIrEnd;
                            PAgrCplAll;


LEXICON TAMg1DIr
%<dir%>:^D^Ir@MB TAMg1DIrCont;

LEXICON TAMg1DIrCont
%<3p%>:s^Inl^Ar@MB     #;

! ---------------------------
! -DI
!

LEXICON TAMDICont
            PAgrDI;
            CplPast;
            CplCond;

LEXICON PAgrDI
%<1s%>:m@MB         PAgrDICont;
%<2s%>:n@MB         PAgrDICont;
%<3s%>:0@MB         PAgrDICont;
%<3p%>:0@MB         PAgrDICont;
%<1p%>:k@MB         PAgrDICont;
%<2p%>:n^Iz@MB      PAgrDICont;
%<3p%>:l^Ar@MB      PAgrDICont;

LEXICON PAgrDICont
                        #;
                        PAgrCplCond;
                        PAgrCplPast;
%<q%>:@miSPCm^I@MB      PAgrDIQCont;

LEXICON PAgrDIQCont
                            #;
                            PAgrCplPast2; ! we do not allow double 
                            PAgrCplCond2; ! copula after di-mi 
                            PAgrCplEvid2;
!
!
!

LEXICON TAMCondCont
                        TAMCondPAgr;
                        CplPast2;   ! no double copula sa-di-sa
                        CplEvid2;   !                  sa-mis-sa
%<q%>:@miSPCm^I@MB      TAMCondQCpl;
#if (PREDICATE_WITHOUT_PAGR == 1)
                        #;
#endif

LEXICON TAMCondQCpl
            CplPast2;
            CplEvid2;

LEXICON TAMCondPAgr
%<1s%>:m@MB         TAMCondPAgrCont;
%<2s%>:n@MB         TAMCondPAgrCont;
%<3s%>:0@MB         TAMCondPAgrCont;
%<3p%>:0@MB         TAMCondPAgrCont;
%<1p%>:k@MB         TAMCondPAgrCont;
%<2p%>:n^Iz@MB      TAMCondPAgrCont;
%<3p%>:l^Ar@MB      TAMCond3pCont;

LEXICON TAMCondPAgrCont
                        #;
%<q%>:@miSPCm^I@MB      TAMCondQPAgrCont; ! this is somewhat odd: oku-sa-k mı

LEXICON TAMCond3pCont
                        TAMCondPAgrCont;
                        PAgrCplPast2;
                        PAgrCplEvid2;

LEXICON TAMCondQPAgrCont
                #;
                PAgrCplPast2;
                PAgrCplEvid2;

LEXICON TAMCondYACont ! this is informal: gel-e-ydi
            CplPast2;
            CplEvid2;

!
! Optative
!

LEXICON TAMOptCont
                        OptPAgr;
%<q%>:@miSPCm^I@MB      OptQCont;
#if (PREDICATE_WITHOUT_PAGR == 1)
                        #;
#endif

LEXICON OptQCont
%<cpl%:past%>:^(y)^D^I@MB     PAgrG2End;
%<cpl%:evid%>:^(y)m^Iş@MB     PAgrG1End;

! TODO: opt3s below seems to be a half-implemented feature, but not
!       clear what...

LEXICON OptPAgr
%<1s%>:^(y)^Im@MB       OptPAgrCont;
%<2s%>:s^In@MB          #;
%<3s%>:@opt3s^In@MB     OptPAgrCont;
%<1p%>:l^Im@MB          OptPAgrCont;
%<2p%>:s^In^Iz@MB       #;
%<3p%>:@opt3s^In@MB     OptPAgrCont;
%<3p%>:@opt3s^Inl^Ar@MB OptPAgrCont;
%<3s%>:0@MB             OptPAgrCont; ! these two are 
%<3p%>:l^Ar@MB          OptPAgrCont; ! colloquial use
%<3p%>:0@MB             OptPAgrCont; ! ... or maybe 3

LEXICON OptPAgrCont
                        #;
%<q%>:@miSPCm^I@MB      OptPagrQCont;

LEXICON OptPagrQCont
                        #;
                        PAgrCplEvid2;
                        PAgrCplPast2;

!
! Imperative
!

LEXICON TAMImpCont
                        PAgrIMPEnd;

LEXICON PAgrIMPEnd
%<2s%>:0@MB             #;
%<2s%>:s^An^A@MB        #;
%<2s%>:^(y)^In@MB       #;
%<3s%>:s^In@MB          #;
%<3p%>:s^In@MB          #;
%<2p%>:^(y)^In@MB       #;
%<2p%>:^(y)^In^Iz@MB    #;
%<2p%>:s^An^Iz^A@MB  #;
%<3p%>:s^Inl^Ar@MB      #;

!
! Person agreement markers, final state.
!
LEXICON PAgrG1End
%<1s%>:^(y)^Im@MB  #;
%<2s%>:s^In@MB     #;
%<3s%>:0@MB        #;
%<3p%>:0@MB        #;
%<1p%>:^(y)^Iz@MB  #;
%<2p%>:s^In^Iz@MB  #;
%<3p%>:l^Ar@MB     #;

LEXICON PAgrG2End
%<1s%>:m@MB         #;
%<2s%>:n@MB         #;
%<3s%>:0@MB         #;
%<3p%>:0@MB         #;
%<1p%>:k@MB         #;
%<2p%>:n^Iz@MB      #;
%<3p%>:l^Ar@MB      #;


!
! i- is a bound (verbal) root that combines with copular markers.
!

LEXICON V_i
%<V%>:@RB         iCont;

LEXICON iCont
            CplAll;


!
! -mI : this is `clitic' -mI with all possible preceding context
!

LEXICON mI
%<Q%>:@RB             mICont;

LEXICON mICont
                        #; ! we have person marker before.   
                        mIPagr;
                        mIDI;
                        mIMIS;
                        mIDIr;

LEXICON mIPagr
%<1s%>:^(y)^Im@MB      mIPagrCont;
%<2s%>:s^In@MB         mIPagrCont;
%<3s%>:0@MB            mIPagrCont;
%<3p%>:0@MB            mIPagrCont;
%<1p%>:^(y)^Iz@MB      mIPagrCont;
%<2p%>:s^In^Iz@MB      mIPagrCont;

LEXICON  mIPagrCont
                        #;
                        mIDIr;

LEXICON mIDI
%<cpl%:past%>:^(y)^D^I@MB  PAgrG2End;

LEXICON mIMIS
%<cpl%:evid%>:^(y)m^Iş@MB PAgrG1End;

LEXICON mIDIr
%<dir%>:^D^Ir@MB        mIDIrCont;

LEXICON  mIDIrCont
                        #;
%<3p%>:l^Ar@MB          #;

! Copular marker combinations
!
! this is for simplifying the copula replication above.
!
! the description below may be a bit too permissive

! here we do not have any agreement markers yet
!
LEXICON CplAll
    CplEvid;
    CplPast;
    CplCond;
    CplKen;
    lArCplKen; ! this is a trick to analyze words like 'yürürlerken'
               ! or 'evdelerken'. It seems if person in question is
               ! <3p>, then it can be added, but other cases take null
               ! agreement. We only mark <3p>, if there is -lAr.
               ! Otherwise it can agree with any person, but we do not 
               ! mark it.
               !
               ! TODO: this may not be the best decision.

LEXICON CplEvid
%<cpl%:evid%>:^(y)m^Iş@MB     CplEvidCont;

LEXICON CplEvidCont
                PAgrG1End;
                CplPAgrG1; ! this is marked/rare usage - gidiyormuşumsa
                CplCond2;
                CVcesinePagr;
! TODO: In a relatively rare number of cases -DIr may follow if -(I)yor 
!       precedes the evidential copula.

LEXICON CplEvid2
%<cpl%:evid%>:^(y)m^Iş@MB     PAgrG1End;
    
LEXICON CplPast2
%<cpl%:past%>:^(y)^D^I@MB      PAgrG2End;

LEXICON CplCond2
%<cpl%:cond%>:^(y)s^A@MB       PAgrG2End;

LEXICON CplCond
%<cpl%:cond%>:^(y)s^A@MB       CplCondCont;

LEXICON  CplCondCont
                            PAgrG2End;
                            CplEvid2;
                            CplPast2;

LEXICON  CplPast
%<cpl%:past%>:^(y)^D^I@MB      CplPastCont;

LEXICON CplPastCont
                PAgrG2End;
                CplPAgrG2; ! this is marked/rare usage - gidiyordumsa
                CplCond2;

LEXICON CplPAgrG1
%<1s%>:^(y)^Im@MB  CplPAgrG1Cont;
%<2s%>:s^In@MB     CplPAgrG1Cont;
%<3s%>:0@MB        CplPAgrG1Cont;
%<3p%>:0@MB        CplPAgrG1Cont;
%<1p%>:^(y)^Iz@MB  CplPAgrG1Cont;
%<2p%>:s^In^Iz@MB  CplPAgrG1Cont;
%<3p%>:l^Ar@MB     CplPAgrG1Cont;

LEXICON CplPAgrG1Cont
                        #;
                        PAgrCplCond2;


LEXICON CplPAgrG2
%<1s%>:m@MB         CplPAgrG2Cont;
%<2s%>:n@MB         CplPAgrG2Cont;
%<3s%>:0@MB         CplPAgrG2Cont;
%<3p%>:0@MB         CplPAgrG2Cont;
%<1p%>:k@MB         CplPAgrG2Cont;
%<2p%>:n^Iz@MB      CplPAgrG2Cont;
%<3p%>:l^Ar@MB      CplPAgrG2Cont;

LEXICON CplPAgrG2Cont
                        #;
                        PAgrCplCond2;

! here if we have a person agreement already, happens after -DI, -sA
! and with -lAr after other TAM markers or nouns.
! 

LEXICON PAgrCplAll
                PAgrCplEvid;
                PAgrCplPast;
                PAgrCplCond;

LEXICON PAgrCplEvid
%<cpl%:evid%>:^(y)m^Iş@MB     PAgrCplEvidCont;

LEXICON PAgrCplEvidCont
                            #;
                            PAgrCplCond2;

LEXICON PAgrCplPast
%<cpl%:past%>:^(y)^D^I@MB      PAgrCplPastCont;

LEXICON PAgrCplPastCont
                            PAgrCplCond2;
                            #;

LEXICON PAgrCplCond
%<cpl%:cond%>:^(y)s^A@MB       PAgrCplCondCont;

LEXICON PAgrCplCondCont
                            #;
                             PAgrCplEvid2;
                             PAgrCplPast2;

LEXICON PAgrCplEvid2
%<cpl%:evid%>:^(y)m^Iş@MB     #;

LEXICON PAgrCplPast2
%<cpl%:past%>:^(y)^D^I@MB      #;

LEXICON PAgrCplCond2
%<cpl%:cond%>:^(y)s^A@MB       #;


!
! -(y)ken makes adverbials (converb?). However it  attaches where copular 
! markers typically attach, except it does not combine with person 
! agreement markers.
!

LEXICON lArCplKen
%<3p%>:l^Ar@MB      CplKen;

LEXICON CplKen
%<cv%:ken%>%<Adv%>:^(y)ken@MB  AdvTimeCont; 

!
! Subordinating suffixes
!
!

LEXICON SubSuffixes
VerbalNoun;
Participle;
ConVerb;

LEXICON VerbalNoun
%<vn%:inf%>%<N%>:m^A@MB              VNMaCont;
%<vn%:inf%>%<N%>:m^A^K@MB            VNMakCont;
%<vn%:yis%>%<N%>:^(y)^Iş@MB          Ncont;     !TODO: a better tag name
%<vn%:past%>%<N%>:^D^I^k@MB          Ncont;
%<vn%:fut%>%<N%>:^(y)^Ac^A^k@MB      Ncont;
%<vn%:pres%>%<N%>:^(y)^An@MB         Ncont;

LEXICON VNMaCont
    NcompCont; ! includes final
    D_lI;
    ND_lIk;
    Deriv_MACA;
    D_CI;
    D_CIl; ! not likely
    D_sAl; ! not likely
#if (MARK_NCOMP == 1) 
    NcompInfl;
#endif

LEXICON VNMakCont
                              #;
                              NCaseNoGen;
                              NomPredicateMAK;

LEXICON Participle
%<part%:past%>%<Adj%>:^D^I^k@MB              PartCont;
%<part%:fut%>%<Adj%>:^(y)^Ac^A^k@MB        PartCont;
%<part%:pres%>%<Adj%>:^(y)^An@MB             PartCont;

LEXICON PartCont
                   #;
                   Ncont;
!                   AdjCont;

! TODO: this part needs rework. The list below roughly follows
!       G&K and the SFST version.
!
LEXICON ConVerb

%<cv%:ip%>:^(y)^Ip@MB                       DerivACont;
%<cv%:meksizin%>:m^Aks^Iz^In@MB             DerivACont;
%<cv%:ince%>:^(y)^Inc^A@MB                  DerivACont;
%<cv%:erek%>:^(y)^Ar^Ak@MB                  DerivACont;
%<cv%:eli%>:^(y)^Al^I@MB                    DerivACont;
%<cv%:dikce%>:^D^Ik^C^A@MB                  DerivACont;
%<cv%:esiye%>:^(y)^As^Iy^A@MB               DerivACont;
%<cv%:ye%>:^(y)^A@MB                        DerivACont;

LEXICON CVNeg
%<cv%:den%>:d^An@MB             DerivACont;
%<cv%:den%>:zd^An@MB            DerivACont; ! this is informal

LEXICON CVcesine
%<cv%:cesine%>:^C^As^In^A@MB     DerivACont;

LEXICON CVcesinePagr
%<1s%>:^(y)^Im@MB  CVcesine;
%<2s%>:s^In@MB     CVcesine;
%<3s%>:0@MB        CVcesine;
%<3p%>:0@MB        CVcesine;
%<1p%>:^(y)^Iz@MB  CVcesine;
%<2p%>:s^In^Iz@MB  CVcesine;
%<3p%>:l^Ar@MB     CVcesine;


!
! The following defines behaviour of a small set of special words
! (mostly clitics). These are defined in clitics.lexc
!

! üzer (somewhat) is like `üst', but does not 
! occur in bare form. Below, we (currently) allow 
! it to form pospositional phrases just like üst/alt etc. 
! However, we do not allow it to function as adjectives.
!
!
! TODO: check whether this is too restrictive or not. 
!
LEXICON   uzerCont 
            uzerN;
            PostPlocation;

LEXICON uzerN
%<N%>:@RB     uzerNcont; 

LEXICON uzerNcont
                            Nplu;
                            Npos;
                            Ncase;
                            Nderiv;
#if (MARK_NCOMP == 1)
                            NcompInfl;
#endif


LEXICON var
%<Exist%>:@RB Ncont;

LEXICON yok
%<Exist%:neg%>:@RB Ncont;

LEXICON degil
%<Not%>:@RB Ncont;

!LEXICON VYDCont
!            VYDPAgr;
!            VYDDir;
!            CplAll;
!
!LEXICON VYDPAgr
!%<1s%>:^(y)^Im@MB       VYDPAgrCont;
!%<2s%>:s^In@MB          VYDPAgrCont;
!%<3s%>:0@MB             VYDPAgrCont;
!%<3p%>:0@MB             VYDPAgrCont;
!%<1p%>:^(y)^Iz@MB       VYDPAgrCont;
!%<2p%>:s^In^Iz@MB       VYDPAgrCont;
!%<3p%>:l^Ar@MB          VYDPAgrCont;
!
!LEXICON VYDDir
!%<dir%>:^D^Ir@MB    VYDPAgrp3;
!
!LEXICON VYDPAgrCont
!                    #;
!%<dir%>:^D^Ir@MB    #;
!
!LEXICON  VYDPAgrp3
!%<3p%>:l^Ar@MB   #;

!
! Punctuation
!

LEXICON  Punc
%<Punc%>:0     #;

!
! Derivational process.
!
! We include only a select set of relatively productive derivational
! morphemes here. However, the description below is still rather liberal. 
! Most derivational
! suffixes are either not very productive, or restrictive in their use more
! than prescribed with the rules below.
!
! The first part organizes the entry point to the classes of
! derivational suffixes. Then we describe the actual suffixes. And
! later how they continue. Entry/exit parts are rather redundant,
! However, it helps if certain restrictions (for example, not allowing
! indefinite number of derivations.
! 
!
! TODO: better handling of derivations. 
!

LEXICON Mderiv
        MN_zero;

LEXICON Nderiv
            D_lI;
!            D_sIz; ! sIz can combine after most of the inflectional suffixes
            ND_lIk;
            Dimin;
            ND_CA;
            D_CI;
            D_CIl;
#if (ANALYZE_lA == 1)
            D_lA;
#endif
            ND_lAn;
            ND_lAS;
            D_sAl;
            D_imsi;
!            D_gil; ! this works only in special cases.

LEXICON Pderiv
            D_lI;
            D_sIz;
            ND_lIk;
            PD_CA;
            D_CI;
            D_CIl;
            ND_lAS;

LEXICON Jderiv
            JD_lIk;
            D_lI;
#if (ANALYZE_lA == 1)
            D_lA;
#endif
            JD_CA;
            JD_lAn;
            JD_lAS;
            JN_zero;
            JP_poss;
            D_imsi;

LEXICON Aderiv
            AD_lIk;
            AD_CA;
            AN_zero;
!            AJ_zero;

LEXICON Vderiv
            D_yIcI;
            D_yIS;
!            D_mA;
            D_yAsI;

LEXICON Oderiv
            D_lA;

! -lI is productive. The simple example is 
!           şeker `sugar' -> şeker-li `[something] with sugar' 
!    some forms are lexicalized, but in most cases semantics is clear.
!
! -lI makes nouns or adjective from nouns or adjectives, although
!     less likely, it may also make adverbs.
!       N -> N : atlı
!       N -> J : akıllı
!       J -> J : mavili
!
!   Here, we make use of the fact that adjectives can become a noun
!   with a zero derivation, and assume that -lI only derives
!   adjectives from nouns. This may not be too far from reality
!   either. Since the first example above `atlı' is also an adjective,
!   and the noun form has a similar sense as any other noun derived
!   from adjectives. This is less clear for J->J case, but it is more
!   reasonable to assume that `mavi' in the example above refers to
!   the color, hence it must start as a noun, likely by derivation from 
!   the adjective.
!
LEXICON   D_lI
%<li%>:l^I@MB         DerivJCont;
%<li%>:l^I@MB         DerivACont;

! -sIz behaves almost exactly like -lI, with the opposite meaning.
!           şeker `sugar' -> şeker-siz `[something] without sugar' 
!
! Further, -sIz tends to appear after some nominal suffixes, for
! example: 'çocuk-lar-ım-sız'. In principle, it can attach wherever 
! a case suffix can (which may raise the question whether it may 
! function as a case suffix or not---`abessive case'?). For most of
! these cases -lI may be plausible too, but it sounds less likely,
! possibly because the instrumental/commutative suffix has a similar
! function. We do not allow -lI to combine that freely, unless/until data
! dictates so.
!
! it is more likely for -sIz to form adverbs 
!       N -> N : kitap-sız (lexicalized)
!       N -> J : akılsız 
!       N -> A : arabasız
LEXICON   D_sIz
%<siz%>:s^Iz@MB       DerivJCont;
%<siz%>:s^Iz@MB       DerivACont;

! -lIK makes nouns from nouns, adjectives adverbs
!       N -> N: kitap-lık, kral-lık
!       J -> N: iyi-lik
!       A -> N: yavaş-lık
!
LEXICON   ND_lIk
%<lik%>:l^I^k@MB       DerivNCont;
%<lik%>:l^I^k@MB       DerivJCont;
LEXICON   JD_lIk
%<lik%>:l^I^k@MB       DerivNCont;
LEXICON   AD_lIk
%<lik%>:l^I^k@MB       DerivNCont;

! -arası `between' forms some compund adjectives from 
!        plural nouns this is quite productive.
!        uluslar-arası, bölgeler-arası, ilkokullar-arası
!
!
LEXICON   D_arasi
%<arasi%>:arası            DerivJCont;

! -(I)ms(I) also makes adjectives from nouns and adjectives.
!           mavi-msi, tatlı-msı, gül-ümsü
!
LEXICON   D_imsi
%<imsi%>:^(I)ms^I     DerivJCont;

! Dimunitive suffixes.
!
! TODO: not every nouns combines with every diminutive marker
! TODO: some cases like 'küçücük'.
!
LEXICON   Dimin
%<dim%>:^C^I^k@MB        DerivNCont;
%<dim%>:c^A^k@MB         DerivNCont;
%<dim%>:^(I)c^A^k@MB     DerivNCont;
%<dim%>:^(A)c^A^k@MB     DerivNCont;
%<dim%>:c^Ağ^Iz@MB       DerivNCont;

! -CI generally marks occupation, "someone who does or sells something"
!      N->N : şeker-ci , 
!      N->J : geri-ci
!
!   TODO/CHECK: again assuming that it only derives adjectives is an
!               option. then adj. might become a noun by zero-deriv.
!   TODO/CHECK: it also derives nouns from verbs (e.g., ögrenci) but
!               these should be lexicalized.
LEXICON   D_CI
%<ci%>:^C^I@MB     DerivNCont;
%<ci%>:^C^I@MB   DerivJCont;

! -CA makes adverbs from nouns, pronouns, adjectives and adverbs, and in a 
!     restrictive case it derives adjectives from numbers.
!     it also derives nouns from nouns in some cases: Alman-ca.
!       N->A: çocuk-ça
!       P->A: ben-ce
!       A->A: hızlı-ca  `somewhat fast'
!       J->J: büyük-çe  `somewhat big'
!       M->J: on-lar-ca
!  It also derives adjectives from adjectives and adverbs from
!  adverbs, where it changes the degree
!
!
LEXICON   Deriv_MACA
%<ca%>:^C^A@MB DerivNCont;
LEXICON   ND_CAlanguage
%<ca%>:^C^A@MB DerivNCont;
LEXICON   ND_CA
%<ca%>:^C^A@MB DerivACont;
LEXICON   JD_CA
%<ca%>:^C^A@MB DerivJCont;
%<ca%>:^C^A@MB DerivACont;
LEXICON   AD_CA
%<ca%>:^C^A@MB DerivACont;
LEXICON   MD_CA
%<ca%>:^C^A@MB DerivJCont;
LEXICON   PD_CA
%<ca%>:^C^A@MB DerivACont;

! -(y)IcI makes adjectives (and nouns) from verbs.
!       bulaşıcı, görücü, yapıcı
!
!   TODO/CHECK: these may all be lexicalized.
!
LEXICON D_yIcI
%<yici%>:^(y)^Ic^I      DerivJCont;

! -CIl makes adjectives from nouns
!       N->J insancıl,
!
! it also makes nouns (e.g., balıkçıl) but we, again, assume that this 
! goes through the adjective path
!
!  N->N 

LEXICON D_CIl
%<cil%>:^C^Il              DerivJCont;

! -gil makes nouns from nouns. 
!   `  it is normally attached to proper names (Ahmet-gil) and nouns 
!      specifying family members after possessive suffixes (anne-m-gil).
!      it also occurs with common nouns (bakla-gil), but these should
!      al be lexicalized.
!
LEXICON D_gil
%<gil%>:gil       DerivNCont;

! -DIr  makes adverbial phrases from quantified nouns specifying time 
!       üç gündür, bir zamandır ....
!
! TODO: tag is the same as other <dir>
!
LEXICON D_dir
%<dir%>:^D^Ir      DerivACont;


! -lA is productive, and makes verbs from nouns
!
!       tuz-la, şeker-le, kuru-la ....
!       it also attaches to some(all/most?) onomatopoeic words.
!
!  NOTE: although it is productive, the N->V derivation causes a lot 
!        of ambiguous analyses. it is commented out.
!
!LEXICON ND_lA
!%<la%>:l^A       DerivVCont;
LEXICON D_lA
%<la%>:l^A       DerivVCont;

! -lAn makes verbs from nouns and adjectives
!
!       N->V: av-lan, N->J: kuru-lan
!
LEXICON ND_lAn
%<lan%>:l^An       DerivVCont;
LEXICON JD_lAn
%<lan%>:l^An       DerivVCont;

! -lAş makes verbs from nouns and adjectives
!
!       N->V: mektup-laş, N->J: güzel-laş
!
!   TODO/CHECK: these may all be lexicalized verbs
LEXICON ND_lAS
%<las%>:l^Aş       DerivVCont;
LEXICON JD_lAS
%<las%>:l^Aş       DerivVCont;

! -(y)Iş makes nouns from verbs
!       yürüyüş, duruş, bakış
!
!   TODO: these probably are also lexicalized
!
LEXICON D_yIS
%<yis%>:^(y)^Iş   DerivNCont;

! -(y)AsI makes adjectives, and can be attached after voice suffixes,
!  and possibly to any non-finite verbal form.
!
!   okuyası, görülesi, getirtesi 
!
!  TODO: There may be two different processes that we hide behind this
!  derivation. The forms without passive does not function like adjectives.
!  They mostly be used in conditional/existential predicates, 
!  'uyuyası olsaydı', 'getiresi varsa ...'. But we mark all resulting
!  forms as adjectives.
!
LEXICON D_yAsI
%<esi%>:^(y)^As^I   DerivJCont;

! -mA makes nouns and adjectives from verbs
!    V->N: ödeme, arama, kıyma, kesme
!    V->J: kıyma, kesme, dökme, bunama
! these probably are also lexicalized, and this creates a lot of
! ambiguity (-mA is also a subordinating suffix). So it's out.
!
!LEXICON D_mA
!%<ma%>:m^A   DerivNCont;
!%<ma%>:m^A   DerivJCont;

! -sAl makes adjectives from nouns
!       bilimsel, tarihsel, duşsel...
!
LEXICON D_sAl
%<sal%>:s^Al  DerivJCont;


LEXICON JN_zero
%<%0%>%<N%>:@MB   Ncont;

LEXICON AN_zero
%<%0%>%<N%>:@MB   Ncont;

! This may be a way for avoiding duplicated adj/adv entries int he
! lexicon
!LEXICON AJ_zero
!%<%0%>%<Adj%>:@MB   AdjCont;

LEXICON MN_zero
%<%0%>%<N%>:@MB   Ncont;

!
!
!
LEXICON DerivNCont
%<N%>:0@MB       Ncont; ! this gives unlimited application of derivation
!%<N%>:0@MB      Ninfl;   ! only one derivation after root.

LEXICON DerivJCont
%<Adj%>:0@MB    AdjCont; ! this gives unlimited application of derivation
!%<Adj%>:0@MB   #;   ! only one derivation after root.

LEXICON DerivACont
%<Adv%>:0@MB    AdvCont; ! this gives unlimited application of derivation
!%<Adv%>:0@MB   #;   ! only one derivation after root.

LEXICON DerivVCont
%<V%>:0@MB      VCont; ! this gives unlimited application of derivation
!%<V%>:0@MB     Vinfl; ! only one derivation after root.


